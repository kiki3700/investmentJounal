library(magrittr)
library(lubridate)
library(timetk)
library(xts)
library(httr)
library(rvest)
library(readr)
#sell
sell<-function(ticker,price,unit,date,wichport){
#데이터 호출
arrow_1_unit<-read.csv('data/arrow_1/arrow_1_unit.csv',row.names = 1)
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1)
arrow_1_trading<-read.csv('data/arrow_1/arrow_1_trading.csv',row.names = 1)
arrow_1_cash_balance<-read.csv('data/arrow_1/arrow_1_cash_balance.csv',row.names=1)
arrow_1_cash<-read.csv('data/arrow_1/arrow_1_cash.csv',row.names = 1)
arrow_1_realized_profit<-read.csv('data/arrow_1/arrow_1_realized_profit.csv')
arrow_1_stock_list$ticker<-str_pad(arrow_1_stock_list$ticker,6,side=c('left'),0)
arrow_1_trading$ticker<-str_pad(arrow_1_trading$ticker,6,side=c('left'),0)
#cash에서 입금
arrow_1_cash<-rbind(arrow_1_cash,data.frame('date'=date,distribution=(price*unit),balance=last(arrow_1_cash$balance)+(price*unit),'function'='sell'))
print(arrow_1_cash)
write.csv(arrow_1_cash,'data/arrow_1/arrow_1_cash.csv')
#cash_balance에 기입
if(row.names(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]==date){
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]+(price*unit)
}else{
arrow_1_cash_balance<-rbind(arrow_1_cash_balance,arrow_1_cash_balance[nrow(arrow_1_cash_balance),])
row.names(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]<-date
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]+(price*unit)
}
print(arrow_1_cash_balance)
write.csv(arrow_1_cash_balance,'data/arrow_1/arrow_1_cash_balance.csv')
#trading 다시 보기
arrow_1_trading<-rbind(arrow_1_trading, data.frame('date'=date, 'ticker'=ticker, 'price'=-price, 'unit'=unit, 'buy.sell'='sell', 'realized_profit'=(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit))
print(arrow_1_trading)
write.csv(arrow_1_trading,'data/arrow_1/arrow_1_trading.csv')
#realized profit
#날짜가 같을때
if(arrow_1_realized_profit[nrow(arrow_1_realized_profit),'date']==date){
#기존행 수정
arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
}else{
#새로운행 추가
rbind(arrow_1_realized_profit,arrow_1_realized_profit[nrow(arrow_1_realized_profit),])
arrow_1_realized_profit[nrow(arrow_1_realized_profit),'date']<-date()
arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
}
print(arrow_1_realized_profit)
write.csv(arrow_1_realized_profit,'data/arrow_1/arrow_1_realized_profit.csv')
#stock list 다시보기
if(arrow_1_stock_list[arrow_1_stock_list$ticker%in%ticker,'unit']!=unit){
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]-unit
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]-(price*unit)
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]/arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]
}else{
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,6]<-date
}
print(arrow_1_stock_list)
write.csv(arrow_1_realized_profit,'data/arrow_1/arrow_1_realized_profit.csv')
#unit
#1날짜갱신안됬을때
colnames(arrow_1_unit)<-substr(colnames(arrow_1_unit),2,7)
if(!date%in%rownames(arrow_1_unit)){
arrow_1_unit<-rbind(arrow_1_unit,arrow_1_unit[nrow(arrow_1_unit),])
row.names(arrow_1_unit)[nrow(arrow_1_unit)]<-date
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]-unit
}else{#2날짜가 갱신 되어 있을때
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]-unit
}
print(arrow_1_unit)
write.csv(arrow_1_unit,'data/arrow_1/arrow_1_unit.csv')
}
sell('053210','9000',21,'2020-12-02')
sell('053210','9000',21,'2020-12-02')
arrow_1_cash<-rbind(arrow_1_cash,data.frame('date'=date,distribution=(price*as.numeric(unit)),balance=last(arrow_1_cash$balance)+(price*unit),'function'='sell'))
library(quantmod)
library(stringr )
library(PerformanceAnalytics)
library(magrittr)
library(lubridate)
library(timetk)
library(xts)
library(httr)
library(rvest)
library(readr)
#sell
sell<-function(ticker,price,unit,date,wichport){
#데이터 호출
arrow_1_unit<-read.csv('data/arrow_1/arrow_1_unit.csv',row.names = 1)
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1)
arrow_1_trading<-read.csv('data/arrow_1/arrow_1_trading.csv',row.names = 1)
arrow_1_cash_balance<-read.csv('data/arrow_1/arrow_1_cash_balance.csv',row.names=1)
arrow_1_cash<-read.csv('data/arrow_1/arrow_1_cash.csv',row.names = 1)
arrow_1_realized_profit<-read.csv('data/arrow_1/arrow_1_realized_profit.csv')
arrow_1_stock_list$ticker<-str_pad(arrow_1_stock_list$ticker,6,side=c('left'),0)
arrow_1_trading$ticker<-str_pad(arrow_1_trading$ticker,6,side=c('left'),0)
#cash에서 입금
arrow_1_cash<-rbind(arrow_1_cash,data.frame('date'=date,distribution=(price*as.numeric(unit)),balance=last(arrow_1_cash$balance)+(price*unit),'function'='sell'))
print(arrow_1_cash)
write.csv(arrow_1_cash,'data/arrow_1/arrow_1_cash.csv')
#cash_balance에 기입
if(row.names(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]==date){
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]+(price*unit)
}else{
arrow_1_cash_balance<-rbind(arrow_1_cash_balance,arrow_1_cash_balance[nrow(arrow_1_cash_balance),])
row.names(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]<-date
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]+(price*unit)
}
print(arrow_1_cash_balance)
write.csv(arrow_1_cash_balance,'data/arrow_1/arrow_1_cash_balance.csv')
#trading 다시 보기
arrow_1_trading<-rbind(arrow_1_trading, data.frame('date'=date, 'ticker'=ticker, 'price'=-price, 'unit'=unit, 'buy.sell'='sell', 'realized_profit'=(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit))
print(arrow_1_trading)
write.csv(arrow_1_trading,'data/arrow_1/arrow_1_trading.csv')
#realized profit
#날짜가 같을때
if(arrow_1_realized_profit[nrow(arrow_1_realized_profit),'date']==date){
#기존행 수정
arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
}else{
#새로운행 추가
rbind(arrow_1_realized_profit,arrow_1_realized_profit[nrow(arrow_1_realized_profit),])
arrow_1_realized_profit[nrow(arrow_1_realized_profit),'date']<-date()
arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),2]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]<-arrow_1_realized_profit[nrow(arrow_1_realized_profit),3]+(price-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3])*unit
}
print(arrow_1_realized_profit)
write.csv(arrow_1_realized_profit,'data/arrow_1/arrow_1_realized_profit.csv')
#stock list 다시보기
if(arrow_1_stock_list[arrow_1_stock_list$ticker%in%ticker,'unit']!=unit){
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]-unit
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]-(price*unit)
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]/arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]
}else{
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3]<-0
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,6]<-date
}
print(arrow_1_stock_list)
write.csv(arrow_1_realized_profit,'data/arrow_1/arrow_1_realized_profit.csv')
#unit
#1날짜갱신안됬을때
colnames(arrow_1_unit)<-substr(colnames(arrow_1_unit),2,7)
if(!date%in%rownames(arrow_1_unit)){
arrow_1_unit<-rbind(arrow_1_unit,arrow_1_unit[nrow(arrow_1_unit),])
row.names(arrow_1_unit)[nrow(arrow_1_unit)]<-date
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]-unit
}else{#2날짜가 갱신 되어 있을때
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]-unit
}
print(arrow_1_unit)
write.csv(arrow_1_unit,'data/arrow_1/arrow_1_unit.csv')
}
Q
sell('053210','9000',21,'2020-12-02')
#price구하기
#ticker할당
?read.csv
library(quantmod)
library(stringr )
library(PerformanceAnalytics)
library(magrittr)
library(lubridate)
library(timetk)
library(xts)
library(httr)
library(rvest)
library(readr)
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',stringsAsFactors = F)
arrow_1_stock_list$ticker<-
str_pad(arrow_1_stock_list$ticker,6,side = c('left'),0)
arrow_1_stock_list
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1,stringsAsFactors = F)
arrow_1_stock_list$ticker<-
str_pad(arrow_1_stock_list$ticker,6,side = c('left'),0)
arrow_1_stock_list
ticker<-read.csv('data/KOR_ticker.csv',row.names = 1,stringsAsFactors = F)
ticker
ticker$종목코드<-str_pad(ticker$,6,side=c('left'),0)
ticker
ticker$종목코드<-str_pad(ticker$종목코드,6,side=c('left'),0)
which(arrow_1_stock_list$ticker%in%ticker$종목코드)
ticker$종목코드
ticker$종목코드
arrow_1_stock_list$ticker
ticker$종목코드
arrow_1_stock_list$ticker%in%ticker$종목코드
ticker$종목코드
arrow_1_stock_list$ticker%in%
ticker$종목코드%in%arrow_1_stock_list$ticker
ticker$종목코드%in%arrow_1_stock_list$ticker
ticker[ticker$종목코드%in%arrow_1_stock_list$ticker,]
f<-ticker[ticker$종목코드%in%arrow_1_stock_list$ticker,]
write.csv(f,'data/리스트.cvs')
write.csv(f,'data/리스트.csv')
library(quantmod)
library(stringr )
library(PerformanceAnalytics)
library(magrittr)
library(lubridate)
library(timetk)
library(xts)
library(httr)
library(rvest)
library(readr)
#price구하기
#ticker할당
?read.csv
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1,stringsAsFactors = F)
arrow_1_stock_list$ticker<-
str_pad(arrow_1_stock_list$ticker,6,side = c('left'),0)
symbol<-arrow_1_stock_list$ticker
for(i in 1 : length(symbol)) {
symbol[i]
price_url<-paste0('https://fchart.stock.naver.com/sise.nhn?symbol=',symbol[i],'&timeframe=day&count=500&requestType=0')
tryCatch({
data = GET(price_url)
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
# 데이터 나누기
price = read_delim(data_html, delim = '|')
# 필요한 열만 선택 후 클렌징
price = price[c(1, 5)]
price = data.frame(price)
colnames(price) = c('Date', 'Price')
price[, 1] = ymd(price[, 1])
rownames(price) = price[, 1]
price[, 1] = NULL
price=price%>%as.xts()
if(is.na(arrow_1_stock_list$s_date[i])){
price=price[paste0(ymd(arrow_1_stock_list$p_date[i]),'::',Sys.Date())]
}else{
price=price[paste0(ymd(arrow_1_stock_list$p_date[i]),'::',ymd(arrow_1_stock_list$s_date[i]))]
}
},error=function(e){
warning(paste0('error in ticker',symbol_1[i]))
})
write.csv(price%>%as.data.frame(),paste0('data/arrow_1/price/',symbol[i],'_price.csv'))
}
#데이터 취합
arrow_1_price_list=list()
symbol
arrow_1_stock_list$ticker
for(i in 1:length(arrow_1_stock_list$ticker)){
symbol=arrow_1_stock_list$ticker[i]
arrow_1_price_list[[i]]=
read.csv(paste0('data/arrow_1/price/',symbol,'_price.csv'),row.names = 1)%>%as.xts()
}
arrow_1_price_list=do.call(cbind,arrow_1_price_list)
colnames(arrow_1_price_list)<-arrow_1_stock_list$ticker
arrow_1_price_list<-as.data.frame(arrow_1_price_list)
arrow_1_price_list
write.csv(arrow_1_price_list,'data/arrow_1/arrow_1_price_list.csv')
#realized profit
arrow_1_realized_profit<-read.csv('data/arrow_1/arrow_1_realized_profit.csv',row.names = 1)
arrow_1_realized_profit
if(tail(arrow_1_realized_profit$date,1)!=tail(row.names(arrow_1_price_list),1)){
arrow_1_realized_profit<-rbind(arrow_1_realized_profit,tail(arrow_1_realized_profit,1))
arrow_1_realized_profit$date<-rownames(arrow_1_price_list)
print(arrow_1_realized_profit)
}
arrow_1_realized_profit
write.csv(arrow_1_realized_profit,'data/arrow_1/arrow_1_realized_profit.csv')
#return 수익률 구하기 연구
#NA 0으로 대체
arrow_1_unit[is.na(arrow_1_unit)]<-0
arrow_1_price_list[is.na(arrow_1_price_list)]<-0
ret<-Return.calculate(arrow_1_price_list)
ret
#2.unit
arrow_1_unit<-read.csv('data/arrow_1/arrow_1_unit.csv',row.names = 1)
arrow_1_unit
str(arrow_1_unit)
colnames(arrow_1_unit)<-arrow_1_stock_list$ticker
if(tail(rownames(arrow_1_unit),1)==tail(row.names(arrow_1_price_list),1)){
print('no change')
}else{
arrow_1_unit<-rbind(arrow_1_unit,tail(arrow_1_unit,1))
row.names(arrow_1_unit)=row.names(arrow_1_price_list)
write.csv(arrow_1_unit,'data/arrow_1/arrow_1_unit.csv')
}
write.csv(arrow_1_unit,'data/arrow_1/arrow_1_unit.csv')
#3aum
#NA 0으로 대체
arrow_1_unit[is.na(arrow_1_unit)]<-0
arrow_1_price_list[is.na(arrow_1_price_list)]<-0
#3-1운용자산 구하기
arrow_1_total_asset<-arrow_1_unit*arrow_1_price_list
arrow_1_total_asset
arrow_1_total_asset<-apply(arrow_1_total_asset, 1, sum)%>%as.data.frame()
str(arrow_1_total_asset)
colnames(arrow_1_total_asset)<-'total_asset'
arrow_1_total_asset
#3-2cash balance
arrow_1_cash_balance<-read.csv('data/arrow_1/arrow_1_cash_balance.csv',row.names = 1)
arrow_1_cash_balance
str(arrow_1_cash_balance)
if(tail(rownames(arrow_1_cash_balance),1)==tail(row.names(arrow_1_price_list),1)){
print('no change')
}else{
arrow_1_cash_balance<-rbind(arrow_1_cash_balance,tail(arrow_1_cash_balance,1))
row.names(arrow_1_cash_balance)=row.names(arrow_1_price_list)
write.csv(arrow_1_cash_balance,'data/arrow_1/arrow_1_cash_balance.csv')
}
arrow_1_aum<-cbind(arrow_1_total_asset,arrow_1_cash_balance)
arrow_1_aum$'total_value'=arrow_1_aum$total_asset+arrow_1_aum$balance
arrow_1_aum
write.csv(arrow_1_aum,'data/arrow_1/arrow_1_aum.csv')
#3-3수익률 측정
last(ret)
#summary
arrow_1_summary<-read.csv('data/arrow_1/arrow_1_summary.csv',row.names = 1)
arrow_1_summary[1,4]<-last(arrow_1_cash_balance)
arrow_1_summary[3:(ncol(arrow_1_price_list)+2),6]<-last(ret)%>%as.numeric()%>%round(.,2)
arrow_1_summary[3:(ncol(arrow_1_price_list)+2),4]<-last(arrow_1_price_list)%>%as.numeric()
arrow_1_summary$ticker<-as.character(arrow_1_summary$ticker)
arrow_1_summary[3:(ncol(arrow_1_price_list)+2),1]<-arrow_1_price_list%>%colnames()%>%as.character()
arrow_1_summary[2,4]<-last(arrow_1_aum$total_asset)
arrow_1_summary$hpr<-(arrow_1_summary$end-arrow_1_summary$begin)/arrow_1_summary$begin
arrow_1_summary[2,6]<-last(Return.calculate(arrow_1_aum)$total_asset)
write.csv(arrow_1_summary,'data/arrow_1/arrow_1_summary.csv')
arrow_1_summary
#return에관한 사항은 덜구했다. weight도 안구했다.
library(dplyr)
library(quantmod)
library(PerformanceAnalytics)
library(xts)
library(magrittr)
library(lubridate)
#수익률 계산법 이미 30일 이전 수익을 청산한다. 그리고 bep점으로 활용
#30일까지 수익
ny<-port[port$market=='nyse',1]
ny<-ny%>%as.character()
getSymbols(ny,from='2020-10-29')
p<-list()
for(i in 1: length(ny)){
price<-get(ny[i])[1,1]
price<-price%>%as.data.frame()
p<-cbind(p,price)
}
p
c<-c%>%as.data.frame()
c$c<-NULL
c%>%data.frame()
write.csv(c%>%as.data.frame(),'data/america/price.csv')
#대충해봤는데 30일 시초가 까지 23.09가 나온다 그리고 30 시초가로 치환하고 그때부터 수익률을 구합니다.
#시작
port[,7]
port<-read.csv('data/america/dream_port.csv')
port
symbol<-port$symbol%>%as.character()
#가격추출
for (i in 1:nrow(port)) {
getSymbols(symbol[i],from='2020-10-30')
price<-get(symbol[i])
t<-xts(port[i,7],order.by =date('2020-10-29'))
colnames(t)<-symbol[i]
colnames(price[,6])<-symbol[i]
price<-rbind(t,price[,6])
price<-as.data.frame(price)
price<-cbind(rownames(price),price)
colnames(price)<-c('date',symbol[i])
write.csv(price,paste0('data/america/price/',symbol[i],'_price.csv'))
}
#가격 통합
price_list<-list()
for(i in 1:nrow(port)){
price<-read.csv(paste0('data/america/price/',symbol[i],'_price.csv'),row.names = 1)
price[,1]<-NULL
price_list[[i]]<-price
}
price_list = do.call(cbind, price_list)
price_list
write.csv(price_list,'data/america/price_ame.csv')
#수익률 구하기
CalculateReturns(price_list)
#전체 포트폴리오 수익 구하기
rot<-port$실매수수량
rot_d<-c()
for(i in 1:nrow(price_list)){
rot_d<-rbind(rot_d,rot)
}
#하나씩 결함
aum<-xts()
rot_d<-rot_d%>%as.data.frame()
rot_d[,1]%>%as.data.frame()
t.a<-price_list*rot_d
asset<-apply(t.a, 1, sum)%>%as.data.frame
asset
asset_ret<-CalculateReturns(asset)%>%na.omit()
asset_ret
prod(asset_ret+1)-1
port<-read.csv('data/america/dream_port.csv')
port
port<-read.csv('data/america/dream_port.csv',stringsAsFactors = F)
port
port%>%str
port<-read.csv('data/america/dream_port.csv')
port%>%str
port<-read.csv('data/america/dream_port.csv'stringsAsFactors = F)
port<-read.csv('data/america/dream_port.csv',stringsAsFactors = F)
port<-read.csv('data/america/dream_port.csv',stringsAsFactors = F)
symbol<-port$symbol%>%as.character()
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1,stringsAsFactors = F)
arrow_1_stock_list$ticker<-
str_pad(arrow_1_stock_list$ticker,6,side = c('left'),0)
symbol<-arrow_1_stock_list$ticker
#realized profit
arrow_1_realized_profit<-read.csv('data/arrow_1/arrow_1_realized_profit.csv',row.names = 1,stringsAsFactors = F)
arrow_1_realized_profit
if(tail(arrow_1_realized_profit$date,1)!=tail(row.names(arrow_1_price_list),1)){
arrow_1_realized_profit<-rbind(arrow_1_realized_profit,tail(arrow_1_realized_profit,1))
arrow_1_realized_profit$date<-rownames(arrow_1_price_list)
print(arrow_1_realized_profit)
}
arrow_1_realized_profit
#return 수익률 구하기 연구
#NA 0으로 대체
arrow_1_unit[is.na(arrow_1_unit)]<-0
arrow_1_price_list[is.na(arrow_1_price_list)]<-0
ret<-Return.calculate(arrow_1_price_list)
ret
library(quantmod)
library(stringr )
library(PerformanceAnalytics)
library(magrittr)
library(lubridate)
library(timetk)
library(xts)
library(httr)
library(rvest)
library(readr)
#buy
buy<-function(ticker,price,unit,date,wichport){
#데이터 호출
arrow_1_unit<-read.csv('data/arrow_1/arrow_1_unit.csv',row.names = 1,stringsAsFactors = F)
arrow_1_stock_list<-read.csv('data/arrow_1/arrow_1_stock_list.csv',row.names = 1,stringsAsFactors = F)
arrow_1_trading<-read.csv('data/arrow_1/arrow_1_trading.csv',row.names = 1,stringsAsFactors = F)
arrow_1_cash_balance<-read.csv('data/arrow_1/arrow_1_cash_balance.csv',row.names=1,stringsAsFactors = F)
arrow_1_cash<-read.csv('data/arrow_1/arrow_1_cash.csv',row.names = 1,stringsAsFactors = F)
price<-price%>%as.numeric()
unit<-as.numeric(unit)
#cash에서 출금
arrow_1_cash<-rbind(arrow_1_cash,data.frame('date'=date,distribution=-(price*unit),balance=last(arrow_1_cash$balance)-(price*unit),'function'='buy'))
print(arrow_1_cash)
write.csv(arrow_1_cash,'data/arrow_1/arrow_1_cash.csv')
#cash_balance에 기입
if(rownames(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]==date){
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]-(price*unit)
}else{
arrow_1_cash_balance<-rbind(arrow_1_cash_balance,arrow_1_cash_balance[nrow(arrow_1_cash_balance),])
rownames(arrow_1_cash_balance)[nrow(arrow_1_cash_balance)]<-date
arrow_1_cash_balance[nrow(arrow_1_cash_balance),]<-arrow_1_cash_balance[nrow(arrow_1_cash_balance),]-(price*unit)
}
print(arrow_1_cash_balance)
write.csv(arrow_1_cash_balance,'data/arrow_1/arrow_1_cash_balance.csv')
#trading
arrow_1_trading$ticker<-str_pad(arrow_1_trading$ticker,6,side=c('left'),0)
arrow_1_trading<-rbind(arrow_1_trading, data.frame('date'=date, 'ticker'=ticker, 'price'=price, 'unit'=unit, buy.sell='buy', realized_profit=0))
print(arrow_1_trading)
write.csv(arrow_1_trading,'data/arrow_1_trading.csv')
#stock list
arrow_1_stock_list$ticker<-str_pad(arrow_1_stock_list$ticker,6,side=c('left'),0)
if(ticker%in%arrow_1_stock_list$'ticker'){
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]+unit
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]+(price*unit)
arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,3]<-arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,4]/arrow_1_stock_list[arrow_1_stock_list$'ticker'%in%ticker,2]
}else{
arrow_1_stock_list=rbind(arrow_1_stock_list,data.frame('ticker'=ticker,'unit'=unit,ave_price=price,total_value=(price*unit),p_date=date,s_date=NA))
}
print(arrow_1_stock_list)
write.csv(arrow_1_stock_list,'data/arrow_1/arrow_1_stock_list.csv')
#unit
#1날짜갱신안됬을때
colnames(arrow_1_unit)<-substr(colnames(arrow_1_unit),2,7)
if(!date%in%rownames(arrow_1_unit)){
arrow_1_unit<-rbind(arrow_1_unit,arrow_1_unit[nrow(arrow_1_unit),])
row.names(arrow_1_unit)[nrow(arrow_1_unit)]<-date
#1-1갱신 후 새로운종목 추가
if(ticker%in%colnames(arrow_1_unit)){
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]+unit
}else{
#1-2갱신 후 기존 종목 수정
new_unit<-data.frame(x=c(rep(NA,(nrow(arrow_1_unit)-1)),unit))
colnames(new_unit)<-ticker
arrow_1_unit<-cbind(arrow_1_unit,new_unit)
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]+unit
}
}else{#2날짜가 갱신 되어 있을때
if(ticker%in%colnames(arrow_1_unit)){
#2-1새로운 종목 추가
arrow_1_unit[nrow(arrow_1_unit),ticker]<-arrow_1_unit[nrow(arrow_1_unit),ticker]+unit
}else{
#2-2기존 종목 수정
new_unit<-data.frame(x=c(rep(NA,(nrow(arrow_1_unit)-1)),unit))
colnames(new_unit)<-ticker
arrow_1_unit<-cbind(arrow_1_unit,new_unit)
}
}
print(arrow_1_unit)
write.csv(arrow_1_unit,'data/arrow_1/arrow_1_unit.csv')
}
buy('003070','20200',1,'2020-11-19')
buy('003070','20200',1,'2020-11-19')
